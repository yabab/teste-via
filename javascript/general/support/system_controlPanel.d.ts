/// <reference types="node" />
import { pickle } from "cucumber";
import { StdioOptions } from "child_process";
export declare const oneSecondInMilliseconds: number;
export declare const parseIntDecimalRadix: number;
export declare const defaultInteractionWait: number;
export declare const pollFrequencyDivisionFactor = 0.25;
export declare const defaultPollFrequency: number;
export declare const defaultMaxInterations: number;
export declare const loopLimitMinimumThreshold: number;
export declare const loopTimeoutMinimumThreshold: number;
export declare const webElementValueAttributeName: string;
export declare const tagsParameterName: string;
export declare const mobileEnvironmentVariablesScanOffset: number;
export declare const childProcessStdIoOption: StdioOptions;
export declare const webChromeExecutionName: string;
export declare const webFirefoxExecutionName: string;
export declare const androidAppExecutionName: string;
export declare const androidWebExecutionName: string;
export declare const emptyString: string;
export declare const periodDotString: string;
export declare const zeroString: string;
export declare const newLineString: string;
export declare const hashString: string;
export declare const dollarString: string;
export declare const equalsString: string;
export declare const evaluationSuccessfulString: string;
export declare const evaluationFailedString: string;
export declare const unknownString: string;
export declare const doubleDashString: string;
export declare const existenceStepsAppearanceString: string;
export declare const existenceStepsDisappearanceString: string;
export declare const existenceStepsExistsString: string;
export declare const existenceStepsNonExistsString: string;
export declare const imeiVariableName: string;
export declare const clientCodeVariableName: string;
export declare const environmentVariableName: string;
export declare const dbPasswordVariableName: string;
export declare const dbUserVariableName: string;
export declare const allImagesVariableName: string;
export declare const loopFlagVariableName: string;
export declare const loopIterationVariableName: string;
export declare const loopTimeoutVariableName: string;
export declare const loopLimitVariableName: string;
export declare const databaseJsonUser: string;
export declare const databaseQueryTableCteTelCel: string;
export declare const reportFilesFolder: string;
export declare const reportJsonSubFolder: string;
export declare const screenshotEncodingString: string;
export declare const standardInputEncodingOption: string;
export declare const standardInputDataEventName: string;
export declare const asciiStringCtrlC: string;
export declare const childProcessExitEventName: string;
export declare const childProcessLoopExitKey: string;
export declare function BuildDbConnectionString(dbHostName: string, dbPortNumber: string, dbDriverName: string, dataBaseName: string, databaseUser: string, databaseUserPassword: string): string;
export declare function BuildJsonSelectQuery(column: string, schema: string, table: string, conditions: string): string;
export declare function BuildTestCaseConsoleHeader(cucumberPickle: pickle.Pickle): string;
export declare function BuildTestSignatureName(platformString: string, environmentString: string, loopingTest?: boolean, loopIteration?: number): string;
export declare function BuildMemoryString(text: string): string;
export declare function BuildQuantumSuperPositionErrorMessage(elementSelector: string[]): string;
export declare function BuildInconsistentAppeareanceErrorMessage(elementSelector: string[]): string;
export declare function BuildInconsistentDisappeareanceErrorMessage(elementSelector: string[]): string;
export declare function BuildElementNeverAppearedInTimeErrorMessage(elementSelector: string[], wait: number): string;
export declare function BuildElementNeverDisappearedInTimeErrorMessage(elementSelector: string[], wait: number): string;
export declare function BuildDateString(dateTime?: Date): string;
export declare function BuildTimeString(dateTime?: Date): string;
export declare function BuildTestTimeString(dateTime?: Date): string;
export declare function BuildExecutionNameWithOldPrefix(executionName: string): string;
export declare function BuildKeyValueParameter(key: string, value: string, addDashes?: boolean): string;
export declare function BuildKeywordParameter(keyword: string, addDashes?: boolean): string;
export declare function BuildNewIterationConsoleHeader(nextIterationNumber: number): string;
export declare function BuildScenarioErrorConsoleHeader(errorObject: any): string;
export declare function BuildLoopLimitUnderThresholdError(receivedLoopLimit: number): string;
export declare function BuildLoopTimeoutUnderThresholdError(receivedLoopTimeout: number): string;
export declare function BuildNegativeMatchForStringsErrorMessage(value1: string, value2: string): string;
export declare function BuildPositiveMatchForStringsErrorMessage(value1: string, value2: string): string;
export declare function BuildNegativePartialMatchForStringsErrorMessage(partialString: string, referenceString: string): string;
export declare function BuildNumbersNotWithinMarginErrorMessage(firstValue: number, secondValue: number, margin: number): string;
export declare function BuildNumbersWithinMarginErrorMessage(firstValue: number, secondValue: number, margin: number): string;
export declare function BuildNumberSmallerThanMarginErrorMessage(firstValue: number, secondValue: number, margin: number): string;
